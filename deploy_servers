#!/bin/bash

# Read pem key file path from command line arguments
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "-H" ]]; then
    echo "Usage: deploy_servers [pemfile=optional] [user=optional] [serverAddr=optional]"
    echo -e "Deploy containers to AWS EC2 instance\n"
    echo -e "  pemfile: the file location of the .pem file used to authorize quests to the AWS EC2 instance (default ~/.ssh/pem/ec2-user.pem)"
    echo -e "  user: the user you wish to log into the server with (default ec2-user)"
    echo -e "  serverAddr: the address to the EC2 server instance you wish to deploy to (default ec2-35-183-71-175.ca-central-1.compute.amazonaws.com)"
    echo -e "\nExamples:"
    echo -e "  deploy_servers                   Deploy using default options"
    echo -e "  deploy_servers key               Deploy server with a different key"
    echo -e "  deploy_servers key user          Deploy server with different key and user"
    echo -e "  deploy_servers key user server   Deploy server with different key, user, and server"  
    exit
fi

if [[ "$1" != "" ]]; then
    PEM_FILE_PATH=$1
else
    PEM_FILE_PATH="~/.ssh/pem/ec2-user.pem"
fi

if [[ "$2" != "" ]]; then
    SERVER_USER=$2
else
    SERVER_USER="ec2-user"
fi

if [[ "$3" != "" ]]; then
    SERVER_ADDR=$3
else
    SERVER_ADDR="ec2-35-183-71-175.ca-central-1.compute.amazonaws.com"
fi

APP_NAME="app"

# Remove current app files from server
echo "Removing old files from $SERVER_ADDR..."
ssh -i $PEM_FILE_PATH $SERVER_USER@$SERVER_ADDR "rm -rf ~/$APP_NAME"

# SCP new files to the server
echo "Pushing files to $SERVER_ADDR using SCP..."
scp -i $PEM_FILE_PATH -r ./$APP_NAME $SERVER_USER@$SERVER_ADDR:~/.

# Stop all existing containers
echo "Stopping all existing containers..."
ssh -i $PEM_FILE_PATH $SERVER_USER@$SERVER_ADDR "cd ~/$APP_NAME && docker-compose down"

# Remove all existing docker artifacts
echo "Removing all images, containers, and volumes..."
ssh -i $PEM_FILE_PATH $SERVER_USER@$SERVER_ADDR "docker system prune -a -f"
IMAGES=$(ssh -i $PEM_FILE_PATH $SERVER_USER@$SERVER_ADDR "docker images -a -q")
if [[ "${#IMAGES[@]}" > 0 ]] && [[ "${IMAGES[0]}" != "" ]]; then
    ssh -i $PEM_FILE_PATH $SERVER_USER@$SERVER_ADDR "docker rmi $IMAGES"
fi
CONTAINERS=$(ssh -i $PEM_FILE_PATH $SERVER_USER@$SERVER_ADDR "docker ps -a -q")
if [[ "${#CONTAINERS[@]}" > 0 ]] && [[ "${CONTAINERS[0]}" != "" ]]; then
    ssh -i $PEM_FILE_PATH $SERVER_USER@$SERVER_ADDR "docker rm -v $CONTAINERS"
fi

# Build new images, containers, and volumes using docker-compose
echo "Building new images, containers, and volumes from docker-compose.yml file..."
ssh -i $PEM_FILE_PATH $SERVER_USER@$SERVER_ADDR "cd ~/$APP_NAME && docker-compose build --no-cache"
